import pandas as pd

image=config['image']
workdir: config['workdir']
output_path=config['output_path']
data_path=config['data_path']

run_wildcards=config.get('run_wildcards', '')

# We can directly add python as formal rules.

# Here we create a dataframe and write to a 
# "data_path" cache.
#
# Note that snakemake directives have to be 
# casted into python types if they're used 
# directly like this.
#
rule make_dataframe:
    output:
        '%s/simple_df.pq' % data_path
    run:
        first_row = [1] * 10
        second_row = [2] * 10
        third_row = [3] * 10
        col_names = ['col'+str(i) for i in range(10)]
        row_index = ['ones', 'twos', 'threes']
        data = [first_row, second_row, third_row]
        df = pd.DataFrame(data, columns=col_names, index=row_index)
        df.to_parquet(str(output))

# We encapsulate python logic into a script here,
# passing input/output/wildcard parameters.
#
# We use the generic "run_wildcards" because we
# set several "multipliers" and a "sqrt" flag.
#
rule transform_dataframe:
    input:
        '%s/simple_df.pq' % data_path
    output:
        '{output_path}/%s/transformed.tsv' % run_wildcards
    log:
        '{output_path}/%s/log/transform_dataframe.log' % run_wildcards
    shell:
        'python3 simple/transform.py'
        ' --input-path {input}'
        ' --output-path {output}'
        ' --multiplier {wildcards.multiplier}'
        ' --sqrt {wildcards.sqrt}'
        ' &>{log}'

# We switch back to bash here, filtering the tsv
# output from the last rule. The "filtered.tsv" output
# should only include the row indexed "ones".
#
# Note the params.FINAL='filtered.tsv'. Because we
# use wildcards in this module, the top-level "all" rule
# must include at least one rule from each combination of
# possible wildcards - the DAG tip(s). If there are
# multiple tips, just specify multiple FINAL files.
# There's no reason to specify  multiple files from the
# same DAG-tip rule.
#
rule filter_dataframe:
    input:
        '{output_path}/%s/transformed.tsv' % run_wildcards
    output:
        '{output_path}/%s/filtered.tsv' % run_wildcards
    log:
        '{output_path}/%s/log/filter_dataframe.log' % run_wildcards
    params:
        FINAL='filtered.tsv'
    shell:
        'awk \'/ones/{{print}}\' {input} > {output}'
        ' 2>{log}'

